package com.heaven7.plugin.idea.data_mediator.test;

import com.heaven7.java.base.util.SparseArray;
import com.heaven7.java.base.util.Throwables;
import com.heaven7.java.data.mediator.BaseMediator;
import com.heaven7.java.data.mediator.ListPropertyEditor;
import com.heaven7.java.data.mediator.PropertyInterceptor;
import com.heaven7.java.data.mediator.SparseArrayPropertyEditor;
import com.heaven7.java.data.mediator.internal.DataMediatorDelegate;
import java.lang.Boolean;
import java.lang.Byte;
import java.lang.Character;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.Short;
import java.lang.String;
import java.lang.UnsupportedOperationException;
import java.util.ArrayList;
import java.util.List;

/**
 * <p>This class is generated by Data-mediator framework. DON'T EDIT IT!!!</p>
 *  @author heaven7 */
public class TestParcelableData_$Proxy extends BaseMediator<TestParcelableData> implements TestParcelableData {
  public TestParcelableData_$Proxy(TestParcelableData base) {
    super(base);
  }

  public List<Integer> getTest_int_list() {
    return _getTarget().getTest_int_list();
  }

  public TestParcelableData setTest_int_list(List<Integer> test_int_list1) {
    TestParcelableData target = _getTarget();
    List<Integer> oldValue = target.getTest_int_list();
    if(_getEqualsComparator().isEquals(oldValue, test_int_list1)) {
      return this;
    }
    target.setTest_int_list(test_int_list1);
    dispatchValueChanged(PROP_test_int_list, oldValue, test_int_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Integer> beginTest_int_listEditor() {
    TestParcelableData target = _getTarget();
    List<Integer> values = target.getTest_int_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_int_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Integer>(target, values, PROP_test_int_list, this);
  }

  public List<Float> getTest_Float_list() {
    return _getTarget().getTest_Float_list();
  }

  public TestParcelableData setTest_Float_list(List<Float> test_Float_list1) {
    TestParcelableData target = _getTarget();
    List<Float> oldValue = target.getTest_Float_list();
    if(_getEqualsComparator().isEquals(oldValue, test_Float_list1)) {
      return this;
    }
    target.setTest_Float_list(test_Float_list1);
    dispatchValueChanged(PROP_test_Float_list, oldValue, test_Float_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Float> beginTest_Float_listEditor() {
    TestParcelableData target = _getTarget();
    List<Float> values = target.getTest_Float_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_Float_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Float>(target, values, PROP_test_Float_list, this);
  }

  public List<Double> getTest_Double_list() {
    return _getTarget().getTest_Double_list();
  }

  public TestParcelableData setTest_Double_list(List<Double> test_Double_list1) {
    TestParcelableData target = _getTarget();
    List<Double> oldValue = target.getTest_Double_list();
    if(_getEqualsComparator().isEquals(oldValue, test_Double_list1)) {
      return this;
    }
    target.setTest_Double_list(test_Double_list1);
    dispatchValueChanged(PROP_test_Double_list, oldValue, test_Double_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Double> beginTest_Double_listEditor() {
    TestParcelableData target = _getTarget();
    List<Double> values = target.getTest_Double_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_Double_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Double>(target, values, PROP_test_Double_list, this);
  }

  public Integer getTest_Integer() {
    return _getTarget().getTest_Integer();
  }

  public TestParcelableData setTest_Integer(Integer test_Integer1) {
    TestParcelableData target = _getTarget();
    Integer oldValue = target.getTest_Integer();
    if(_getEqualsComparator().isEquals(oldValue, test_Integer1)) {
      return this;
    }
    target.setTest_Integer(test_Integer1);
    dispatchValueChanged(PROP_test_Integer, oldValue, test_Integer1);
    return this;
  }

  public List<Short> getTest_short_list() {
    return _getTarget().getTest_short_list();
  }

  public TestParcelableData setTest_short_list(List<Short> test_short_list1) {
    TestParcelableData target = _getTarget();
    List<Short> oldValue = target.getTest_short_list();
    if(_getEqualsComparator().isEquals(oldValue, test_short_list1)) {
      return this;
    }
    target.setTest_short_list(test_short_list1);
    dispatchValueChanged(PROP_test_short_list, oldValue, test_short_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Short> beginTest_short_listEditor() {
    TestParcelableData target = _getTarget();
    List<Short> values = target.getTest_short_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_short_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Short>(target, values, PROP_test_short_list, this);
  }

  public Character getTest_Character() {
    return _getTarget().getTest_Character();
  }

  public TestParcelableData setTest_Character(Character test_Character1) {
    TestParcelableData target = _getTarget();
    Character oldValue = target.getTest_Character();
    if(_getEqualsComparator().isEquals(oldValue, test_Character1)) {
      return this;
    }
    target.setTest_Character(test_Character1);
    dispatchValueChanged(PROP_test_Character, oldValue, test_Character1);
    return this;
  }

  public boolean isTest_boolean() {
    return _getTarget().isTest_boolean();
  }

  public TestParcelableData setTest_boolean(boolean test_boolean1) {
    TestParcelableData target = _getTarget();
    boolean oldValue = target.isTest_boolean();
    if(_getEqualsComparator().isEquals(oldValue, test_boolean1)) {
      return this;
    }
    target.setTest_boolean(test_boolean1);
    dispatchValueChanged(PROP_test_boolean, oldValue, test_boolean1);
    return this;
  }

  public List<Boolean> getTest_Boolean_list() {
    return _getTarget().getTest_Boolean_list();
  }

  public TestParcelableData setTest_Boolean_list(List<Boolean> test_Boolean_list1) {
    TestParcelableData target = _getTarget();
    List<Boolean> oldValue = target.getTest_Boolean_list();
    if(_getEqualsComparator().isEquals(oldValue, test_Boolean_list1)) {
      return this;
    }
    target.setTest_Boolean_list(test_Boolean_list1);
    dispatchValueChanged(PROP_test_Boolean_list, oldValue, test_Boolean_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Boolean> beginTest_Boolean_listEditor() {
    TestParcelableData target = _getTarget();
    List<Boolean> values = target.getTest_Boolean_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_Boolean_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Boolean>(target, values, PROP_test_Boolean_list, this);
  }

  public short[] getTest_short_array() {
    return _getTarget().getTest_short_array();
  }

  public TestParcelableData setTest_short_array(short[] test_short_array1) {
    TestParcelableData target = _getTarget();
    short[] oldValue = target.getTest_short_array();
    if(_getEqualsComparator().isEquals(oldValue, test_short_array1)) {
      return this;
    }
    target.setTest_short_array(test_short_array1);
    dispatchValueChanged(PROP_test_short_array, oldValue, test_short_array1);
    return this;
  }

  public int[] getTest_int_array() {
    return _getTarget().getTest_int_array();
  }

  public TestParcelableData setTest_int_array(int[] test_int_array1) {
    TestParcelableData target = _getTarget();
    int[] oldValue = target.getTest_int_array();
    if(_getEqualsComparator().isEquals(oldValue, test_int_array1)) {
      return this;
    }
    target.setTest_int_array(test_int_array1);
    dispatchValueChanged(PROP_test_int_array, oldValue, test_int_array1);
    return this;
  }

  public List<Byte> getTest_Byte_list() {
    return _getTarget().getTest_Byte_list();
  }

  public TestParcelableData setTest_Byte_list(List<Byte> test_Byte_list1) {
    TestParcelableData target = _getTarget();
    List<Byte> oldValue = target.getTest_Byte_list();
    if(_getEqualsComparator().isEquals(oldValue, test_Byte_list1)) {
      return this;
    }
    target.setTest_Byte_list(test_Byte_list1);
    dispatchValueChanged(PROP_test_Byte_list, oldValue, test_Byte_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Byte> beginTest_Byte_listEditor() {
    TestParcelableData target = _getTarget();
    List<Byte> values = target.getTest_Byte_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_Byte_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Byte>(target, values, PROP_test_Byte_list, this);
  }

  public String getTest_String() {
    return _getTarget().getTest_String();
  }

  public TestParcelableData setTest_String(String test_String1) {
    TestParcelableData target = _getTarget();
    String oldValue = target.getTest_String();
    if(_getEqualsComparator().isEquals(oldValue, test_String1)) {
      return this;
    }
    target.setTest_String(test_String1);
    dispatchValueChanged(PROP_test_String, oldValue, test_String1);
    return this;
  }

  public List<Long> getTest_long_list() {
    return _getTarget().getTest_long_list();
  }

  public TestParcelableData setTest_long_list(List<Long> test_long_list1) {
    TestParcelableData target = _getTarget();
    List<Long> oldValue = target.getTest_long_list();
    if(_getEqualsComparator().isEquals(oldValue, test_long_list1)) {
      return this;
    }
    target.setTest_long_list(test_long_list1);
    dispatchValueChanged(PROP_test_long_list, oldValue, test_long_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Long> beginTest_long_listEditor() {
    TestParcelableData target = _getTarget();
    List<Long> values = target.getTest_long_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_long_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Long>(target, values, PROP_test_long_list, this);
  }

  public List<Integer> getTest_Integer_list() {
    return _getTarget().getTest_Integer_list();
  }

  public TestParcelableData setTest_Integer_list(List<Integer> test_Integer_list1) {
    TestParcelableData target = _getTarget();
    List<Integer> oldValue = target.getTest_Integer_list();
    if(_getEqualsComparator().isEquals(oldValue, test_Integer_list1)) {
      return this;
    }
    target.setTest_Integer_list(test_Integer_list1);
    dispatchValueChanged(PROP_test_Integer_list, oldValue, test_Integer_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Integer> beginTest_Integer_listEditor() {
    TestParcelableData target = _getTarget();
    List<Integer> values = target.getTest_Integer_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_Integer_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Integer>(target, values, PROP_test_Integer_list, this);
  }

  public byte[] getTest_byte_array() {
    return _getTarget().getTest_byte_array();
  }

  public TestParcelableData setTest_byte_array(byte[] test_byte_array1) {
    TestParcelableData target = _getTarget();
    byte[] oldValue = target.getTest_byte_array();
    if(_getEqualsComparator().isEquals(oldValue, test_byte_array1)) {
      return this;
    }
    target.setTest_byte_array(test_byte_array1);
    dispatchValueChanged(PROP_test_byte_array, oldValue, test_byte_array1);
    return this;
  }

  public long[] getTest_long_array() {
    return _getTarget().getTest_long_array();
  }

  public TestParcelableData setTest_long_array(long[] test_long_array1) {
    TestParcelableData target = _getTarget();
    long[] oldValue = target.getTest_long_array();
    if(_getEqualsComparator().isEquals(oldValue, test_long_array1)) {
      return this;
    }
    target.setTest_long_array(test_long_array1);
    dispatchValueChanged(PROP_test_long_array, oldValue, test_long_array1);
    return this;
  }

  public Short getTest_Short() {
    return _getTarget().getTest_Short();
  }

  public TestParcelableData setTest_Short(Short test_Short1) {
    TestParcelableData target = _getTarget();
    Short oldValue = target.getTest_Short();
    if(_getEqualsComparator().isEquals(oldValue, test_Short1)) {
      return this;
    }
    target.setTest_Short(test_Short1);
    dispatchValueChanged(PROP_test_Short, oldValue, test_Short1);
    return this;
  }

  public char[] getTest_char_array() {
    return _getTarget().getTest_char_array();
  }

  public TestParcelableData setTest_char_array(char[] test_char_array1) {
    TestParcelableData target = _getTarget();
    char[] oldValue = target.getTest_char_array();
    if(_getEqualsComparator().isEquals(oldValue, test_char_array1)) {
      return this;
    }
    target.setTest_char_array(test_char_array1);
    dispatchValueChanged(PROP_test_char_array, oldValue, test_char_array1);
    return this;
  }

  public Float[] getTest_Float_array() {
    return _getTarget().getTest_Float_array();
  }

  public TestParcelableData setTest_Float_array(Float[] test_Float_array1) {
    TestParcelableData target = _getTarget();
    Float[] oldValue = target.getTest_Float_array();
    if(_getEqualsComparator().isEquals(oldValue, test_Float_array1)) {
      return this;
    }
    target.setTest_Float_array(test_Float_array1);
    dispatchValueChanged(PROP_test_Float_array, oldValue, test_Float_array1);
    return this;
  }

  public boolean[] getTest_boolean_array() {
    return _getTarget().getTest_boolean_array();
  }

  public TestParcelableData setTest_boolean_array(boolean[] test_boolean_array1) {
    TestParcelableData target = _getTarget();
    boolean[] oldValue = target.getTest_boolean_array();
    if(_getEqualsComparator().isEquals(oldValue, test_boolean_array1)) {
      return this;
    }
    target.setTest_boolean_array(test_boolean_array1);
    dispatchValueChanged(PROP_test_boolean_array, oldValue, test_boolean_array1);
    return this;
  }

  public Long getTest_Long() {
    return _getTarget().getTest_Long();
  }

  public TestParcelableData setTest_Long(Long test_Long1) {
    TestParcelableData target = _getTarget();
    Long oldValue = target.getTest_Long();
    if(_getEqualsComparator().isEquals(oldValue, test_Long1)) {
      return this;
    }
    target.setTest_Long(test_Long1);
    dispatchValueChanged(PROP_test_Long, oldValue, test_Long1);
    return this;
  }

  public char getTest_char() {
    return _getTarget().getTest_char();
  }

  public TestParcelableData setTest_char(char test_char1) {
    TestParcelableData target = _getTarget();
    char oldValue = target.getTest_char();
    if(_getEqualsComparator().isEquals(oldValue, test_char1)) {
      return this;
    }
    target.setTest_char(test_char1);
    dispatchValueChanged(PROP_test_char, oldValue, test_char1);
    return this;
  }

  public double getTest_double() {
    return _getTarget().getTest_double();
  }

  public TestParcelableData setTest_double(double test_double1) {
    TestParcelableData target = _getTarget();
    double oldValue = target.getTest_double();
    if(_getEqualsComparator().isEquals(oldValue, test_double1)) {
      return this;
    }
    target.setTest_double(test_double1);
    dispatchValueChanged(PROP_test_double, oldValue, test_double1);
    return this;
  }

  public Long[] getTest_Long_array() {
    return _getTarget().getTest_Long_array();
  }

  public TestParcelableData setTest_Long_array(Long[] test_Long_array1) {
    TestParcelableData target = _getTarget();
    Long[] oldValue = target.getTest_Long_array();
    if(_getEqualsComparator().isEquals(oldValue, test_Long_array1)) {
      return this;
    }
    target.setTest_Long_array(test_Long_array1);
    dispatchValueChanged(PROP_test_Long_array, oldValue, test_Long_array1);
    return this;
  }

  public List<FlowItem> getTest_ResultData_list() {
    return _getTarget().getTest_ResultData_list();
  }

  public TestParcelableData setTest_ResultData_list(List<FlowItem> test_ResultData_list1) {
    TestParcelableData target = _getTarget();
    List<FlowItem> oldValue = target.getTest_ResultData_list();
    if(_getEqualsComparator().isEquals(oldValue, test_ResultData_list1)) {
      return this;
    }
    target.setTest_ResultData_list(test_ResultData_list1);
    dispatchValueChanged(PROP_test_ResultData_list, oldValue, test_ResultData_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, FlowItem> beginTest_ResultData_listEditor() {
    TestParcelableData target = _getTarget();
    List<FlowItem> values = target.getTest_ResultData_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_ResultData_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,FlowItem>(target, values, PROP_test_ResultData_list, this);
  }

  public String[] getTest_String_array() {
    return _getTarget().getTest_String_array();
  }

  public TestParcelableData setTest_String_array(String[] test_String_array1) {
    TestParcelableData target = _getTarget();
    String[] oldValue = target.getTest_String_array();
    if(_getEqualsComparator().isEquals(oldValue, test_String_array1)) {
      return this;
    }
    target.setTest_String_array(test_String_array1);
    dispatchValueChanged(PROP_test_String_array, oldValue, test_String_array1);
    return this;
  }

  public Byte getTest_Byte() {
    return _getTarget().getTest_Byte();
  }

  public TestParcelableData setTest_Byte(Byte test_Byte1) {
    TestParcelableData target = _getTarget();
    Byte oldValue = target.getTest_Byte();
    if(_getEqualsComparator().isEquals(oldValue, test_Byte1)) {
      return this;
    }
    target.setTest_Byte(test_Byte1);
    dispatchValueChanged(PROP_test_Byte, oldValue, test_Byte1);
    return this;
  }

  public FlowItem getTest_ResultData() {
    return _getTarget().getTest_ResultData();
  }

  public TestParcelableData setTest_ResultData(FlowItem test_ResultData1) {
    TestParcelableData target = _getTarget();
    FlowItem oldValue = target.getTest_ResultData();
    if(_getEqualsComparator().isEquals(oldValue, test_ResultData1)) {
      return this;
    }
    target.setTest_ResultData(test_ResultData1);
    dispatchValueChanged(PROP_test_ResultData, oldValue, test_ResultData1);
    return this;
  }

  public Double getTest_Double() {
    return _getTarget().getTest_Double();
  }

  public TestParcelableData setTest_Double(Double test_Double1) {
    TestParcelableData target = _getTarget();
    Double oldValue = target.getTest_Double();
    if(_getEqualsComparator().isEquals(oldValue, test_Double1)) {
      return this;
    }
    target.setTest_Double(test_Double1);
    dispatchValueChanged(PROP_test_Double, oldValue, test_Double1);
    return this;
  }

  public byte getTest_byte() {
    return _getTarget().getTest_byte();
  }

  public TestParcelableData setTest_byte(byte test_byte1) {
    TestParcelableData target = _getTarget();
    byte oldValue = target.getTest_byte();
    if(_getEqualsComparator().isEquals(oldValue, test_byte1)) {
      return this;
    }
    target.setTest_byte(test_byte1);
    dispatchValueChanged(PROP_test_byte, oldValue, test_byte1);
    return this;
  }

  public List<Boolean> getTest_boolean_list() {
    return _getTarget().getTest_boolean_list();
  }

  public TestParcelableData setTest_boolean_list(List<Boolean> test_boolean_list1) {
    TestParcelableData target = _getTarget();
    List<Boolean> oldValue = target.getTest_boolean_list();
    if(_getEqualsComparator().isEquals(oldValue, test_boolean_list1)) {
      return this;
    }
    target.setTest_boolean_list(test_boolean_list1);
    dispatchValueChanged(PROP_test_boolean_list, oldValue, test_boolean_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Boolean> beginTest_boolean_listEditor() {
    TestParcelableData target = _getTarget();
    List<Boolean> values = target.getTest_boolean_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_boolean_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Boolean>(target, values, PROP_test_boolean_list, this);
  }

  public List<Float> getTest_float_list() {
    return _getTarget().getTest_float_list();
  }

  public TestParcelableData setTest_float_list(List<Float> test_float_list1) {
    TestParcelableData target = _getTarget();
    List<Float> oldValue = target.getTest_float_list();
    if(_getEqualsComparator().isEquals(oldValue, test_float_list1)) {
      return this;
    }
    target.setTest_float_list(test_float_list1);
    dispatchValueChanged(PROP_test_float_list, oldValue, test_float_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Float> beginTest_float_listEditor() {
    TestParcelableData target = _getTarget();
    List<Float> values = target.getTest_float_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_float_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Float>(target, values, PROP_test_float_list, this);
  }

  public Float getTest_Float() {
    return _getTarget().getTest_Float();
  }

  public TestParcelableData setTest_Float(Float test_Float1) {
    TestParcelableData target = _getTarget();
    Float oldValue = target.getTest_Float();
    if(_getEqualsComparator().isEquals(oldValue, test_Float1)) {
      return this;
    }
    target.setTest_Float(test_Float1);
    dispatchValueChanged(PROP_test_Float, oldValue, test_Float1);
    return this;
  }

  public short getTest_short() {
    return _getTarget().getTest_short();
  }

  public TestParcelableData setTest_short(short test_short1) {
    TestParcelableData target = _getTarget();
    short oldValue = target.getTest_short();
    if(_getEqualsComparator().isEquals(oldValue, test_short1)) {
      return this;
    }
    target.setTest_short(test_short1);
    dispatchValueChanged(PROP_test_short, oldValue, test_short1);
    return this;
  }

  public List<Long> getTest_Long_list() {
    return _getTarget().getTest_Long_list();
  }

  public TestParcelableData setTest_Long_list(List<Long> test_Long_list1) {
    TestParcelableData target = _getTarget();
    List<Long> oldValue = target.getTest_Long_list();
    if(_getEqualsComparator().isEquals(oldValue, test_Long_list1)) {
      return this;
    }
    target.setTest_Long_list(test_Long_list1);
    dispatchValueChanged(PROP_test_Long_list, oldValue, test_Long_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Long> beginTest_Long_listEditor() {
    TestParcelableData target = _getTarget();
    List<Long> values = target.getTest_Long_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_Long_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Long>(target, values, PROP_test_Long_list, this);
  }

  public Boolean[] getTest_Boolean_array() {
    return _getTarget().getTest_Boolean_array();
  }

  public TestParcelableData setTest_Boolean_array(Boolean[] test_Boolean_array1) {
    TestParcelableData target = _getTarget();
    Boolean[] oldValue = target.getTest_Boolean_array();
    if(_getEqualsComparator().isEquals(oldValue, test_Boolean_array1)) {
      return this;
    }
    target.setTest_Boolean_array(test_Boolean_array1);
    dispatchValueChanged(PROP_test_Boolean_array, oldValue, test_Boolean_array1);
    return this;
  }

  public List<Short> getTest_Short_list() {
    return _getTarget().getTest_Short_list();
  }

  public TestParcelableData setTest_Short_list(List<Short> test_Short_list1) {
    TestParcelableData target = _getTarget();
    List<Short> oldValue = target.getTest_Short_list();
    if(_getEqualsComparator().isEquals(oldValue, test_Short_list1)) {
      return this;
    }
    target.setTest_Short_list(test_Short_list1);
    dispatchValueChanged(PROP_test_Short_list, oldValue, test_Short_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Short> beginTest_Short_listEditor() {
    TestParcelableData target = _getTarget();
    List<Short> values = target.getTest_Short_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_Short_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Short>(target, values, PROP_test_Short_list, this);
  }

  public List<Byte> getTest_byte_list() {
    return _getTarget().getTest_byte_list();
  }

  public TestParcelableData setTest_byte_list(List<Byte> test_byte_list1) {
    TestParcelableData target = _getTarget();
    List<Byte> oldValue = target.getTest_byte_list();
    if(_getEqualsComparator().isEquals(oldValue, test_byte_list1)) {
      return this;
    }
    target.setTest_byte_list(test_byte_list1);
    dispatchValueChanged(PROP_test_byte_list, oldValue, test_byte_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Byte> beginTest_byte_listEditor() {
    TestParcelableData target = _getTarget();
    List<Byte> values = target.getTest_byte_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_byte_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Byte>(target, values, PROP_test_byte_list, this);
  }

  public float[] getTest_float_array() {
    return _getTarget().getTest_float_array();
  }

  public TestParcelableData setTest_float_array(float[] test_float_array1) {
    TestParcelableData target = _getTarget();
    float[] oldValue = target.getTest_float_array();
    if(_getEqualsComparator().isEquals(oldValue, test_float_array1)) {
      return this;
    }
    target.setTest_float_array(test_float_array1);
    dispatchValueChanged(PROP_test_float_array, oldValue, test_float_array1);
    return this;
  }

  public long getTest_long() {
    return _getTarget().getTest_long();
  }

  public TestParcelableData setTest_long(long test_long1) {
    TestParcelableData target = _getTarget();
    long oldValue = target.getTest_long();
    if(_getEqualsComparator().isEquals(oldValue, test_long1)) {
      return this;
    }
    target.setTest_long(test_long1);
    dispatchValueChanged(PROP_test_long, oldValue, test_long1);
    return this;
  }

  public Byte[] getTest_Byte_array() {
    return _getTarget().getTest_Byte_array();
  }

  public TestParcelableData setTest_Byte_array(Byte[] test_Byte_array1) {
    TestParcelableData target = _getTarget();
    Byte[] oldValue = target.getTest_Byte_array();
    if(_getEqualsComparator().isEquals(oldValue, test_Byte_array1)) {
      return this;
    }
    target.setTest_Byte_array(test_Byte_array1);
    dispatchValueChanged(PROP_test_Byte_array, oldValue, test_Byte_array1);
    return this;
  }

  public float getTest_float() {
    return _getTarget().getTest_float();
  }

  public TestParcelableData setTest_float(float test_float1) {
    TestParcelableData target = _getTarget();
    float oldValue = target.getTest_float();
    if(_getEqualsComparator().isEquals(oldValue, test_float1)) {
      return this;
    }
    target.setTest_float(test_float1);
    dispatchValueChanged(PROP_test_float, oldValue, test_float1);
    return this;
  }

  public SparseArray<FlowItem> getTest_SparseArray() {
    return _getTarget().getTest_SparseArray();
  }

  public TestParcelableData setTest_SparseArray(SparseArray<FlowItem> test_SparseArray1) {
    TestParcelableData target = _getTarget();
    SparseArray<FlowItem> oldValue = target.getTest_SparseArray();
    if(_getEqualsComparator().isEquals(oldValue, test_SparseArray1)) {
      return this;
    }
    target.setTest_SparseArray(test_SparseArray1);
    dispatchValueChanged(PROP_test_SparseArray, oldValue, test_SparseArray1);
    return this;
  }

  public SparseArrayPropertyEditor<? extends TestParcelableData, FlowItem> beginTest_SparseArrayEditor() {
    TestParcelableData target = _getTarget();
    SparseArray<FlowItem> values = target.getTest_SparseArray();
    if(values == null) {
      values = new SparseArray<>();
      target.setTest_SparseArray(values);
    }
    return new SparseArrayPropertyEditor<TestParcelableData,FlowItem>(target, DataMediatorDelegate.getDefault().getSparseArrayDelegate(values), PROP_test_SparseArray, this);
  }

  public List<Character> getTest_Character_list() {
    return _getTarget().getTest_Character_list();
  }

  public TestParcelableData setTest_Character_list(List<Character> test_Character_list1) {
    TestParcelableData target = _getTarget();
    List<Character> oldValue = target.getTest_Character_list();
    if(_getEqualsComparator().isEquals(oldValue, test_Character_list1)) {
      return this;
    }
    target.setTest_Character_list(test_Character_list1);
    dispatchValueChanged(PROP_test_Character_list, oldValue, test_Character_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Character> beginTest_Character_listEditor() {
    TestParcelableData target = _getTarget();
    List<Character> values = target.getTest_Character_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_Character_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Character>(target, values, PROP_test_Character_list, this);
  }

  public double[] getTest_double_array() {
    return _getTarget().getTest_double_array();
  }

  public TestParcelableData setTest_double_array(double[] test_double_array1) {
    TestParcelableData target = _getTarget();
    double[] oldValue = target.getTest_double_array();
    if(_getEqualsComparator().isEquals(oldValue, test_double_array1)) {
      return this;
    }
    target.setTest_double_array(test_double_array1);
    dispatchValueChanged(PROP_test_double_array, oldValue, test_double_array1);
    return this;
  }

  public List<String> getTest_String_list() {
    return _getTarget().getTest_String_list();
  }

  public TestParcelableData setTest_String_list(List<String> test_String_list1) {
    TestParcelableData target = _getTarget();
    List<String> oldValue = target.getTest_String_list();
    if(_getEqualsComparator().isEquals(oldValue, test_String_list1)) {
      return this;
    }
    target.setTest_String_list(test_String_list1);
    dispatchValueChanged(PROP_test_String_list, oldValue, test_String_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, String> beginTest_String_listEditor() {
    TestParcelableData target = _getTarget();
    List<String> values = target.getTest_String_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_String_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,String>(target, values, PROP_test_String_list, this);
  }

  public int getTest_int() {
    return _getTarget().getTest_int();
  }

  public TestParcelableData setTest_int(int test_int1) {
    TestParcelableData target = _getTarget();
    int oldValue = target.getTest_int();
    if(_getEqualsComparator().isEquals(oldValue, test_int1)) {
      return this;
    }
    target.setTest_int(test_int1);
    dispatchValueChanged(PROP_test_int, oldValue, test_int1);
    return this;
  }

  public Double[] getTest_Double_array() {
    return _getTarget().getTest_Double_array();
  }

  public TestParcelableData setTest_Double_array(Double[] test_Double_array1) {
    TestParcelableData target = _getTarget();
    Double[] oldValue = target.getTest_Double_array();
    if(_getEqualsComparator().isEquals(oldValue, test_Double_array1)) {
      return this;
    }
    target.setTest_Double_array(test_Double_array1);
    dispatchValueChanged(PROP_test_Double_array, oldValue, test_Double_array1);
    return this;
  }

  public FlowItem[] getTest_ResultData_array() {
    return _getTarget().getTest_ResultData_array();
  }

  public TestParcelableData setTest_ResultData_array(FlowItem[] test_ResultData_array1) {
    TestParcelableData target = _getTarget();
    FlowItem[] oldValue = target.getTest_ResultData_array();
    if(_getEqualsComparator().isEquals(oldValue, test_ResultData_array1)) {
      return this;
    }
    target.setTest_ResultData_array(test_ResultData_array1);
    dispatchValueChanged(PROP_test_ResultData_array, oldValue, test_ResultData_array1);
    return this;
  }

  public List<Double> getTest_double_list() {
    return _getTarget().getTest_double_list();
  }

  public TestParcelableData setTest_double_list(List<Double> test_double_list1) {
    TestParcelableData target = _getTarget();
    List<Double> oldValue = target.getTest_double_list();
    if(_getEqualsComparator().isEquals(oldValue, test_double_list1)) {
      return this;
    }
    target.setTest_double_list(test_double_list1);
    dispatchValueChanged(PROP_test_double_list, oldValue, test_double_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Double> beginTest_double_listEditor() {
    TestParcelableData target = _getTarget();
    List<Double> values = target.getTest_double_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_double_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Double>(target, values, PROP_test_double_list, this);
  }

  public short[] getTest_short_array2() {
    return _getTarget().getTest_short_array2();
  }

  public TestParcelableData setTest_short_array2(short[] test_short_array21) {
    TestParcelableData target = _getTarget();
    short[] oldValue = target.getTest_short_array2();
    if(_getEqualsComparator().isEquals(oldValue, test_short_array21)) {
      return this;
    }
    target.setTest_short_array2(test_short_array21);
    dispatchValueChanged(PROP_test_short_array2, oldValue, test_short_array21);
    return this;
  }

  public List<Character> getTest_char_list() {
    return _getTarget().getTest_char_list();
  }

  public TestParcelableData setTest_char_list(List<Character> test_char_list1) {
    TestParcelableData target = _getTarget();
    List<Character> oldValue = target.getTest_char_list();
    if(_getEqualsComparator().isEquals(oldValue, test_char_list1)) {
      return this;
    }
    target.setTest_char_list(test_char_list1);
    dispatchValueChanged(PROP_test_char_list, oldValue, test_char_list1);
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Character> beginTest_char_listEditor() {
    TestParcelableData target = _getTarget();
    List<Character> values = target.getTest_char_list();
    if(values == null) {
      values = new ArrayList<>();
      target.setTest_char_list(values);
    }
    return new ListPropertyEditor<TestParcelableData,Character>(target, values, PROP_test_char_list, this);
  }

  public Character[] getTest_Character_array() {
    return _getTarget().getTest_Character_array();
  }

  public TestParcelableData setTest_Character_array(Character[] test_Character_array1) {
    TestParcelableData target = _getTarget();
    Character[] oldValue = target.getTest_Character_array();
    if(_getEqualsComparator().isEquals(oldValue, test_Character_array1)) {
      return this;
    }
    target.setTest_Character_array(test_Character_array1);
    dispatchValueChanged(PROP_test_Character_array, oldValue, test_Character_array1);
    return this;
  }

  public Short[] getTest_Short_array() {
    return _getTarget().getTest_Short_array();
  }

  public TestParcelableData setTest_Short_array(Short[] test_Short_array1) {
    TestParcelableData target = _getTarget();
    Short[] oldValue = target.getTest_Short_array();
    if(_getEqualsComparator().isEquals(oldValue, test_Short_array1)) {
      return this;
    }
    target.setTest_Short_array(test_Short_array1);
    dispatchValueChanged(PROP_test_Short_array, oldValue, test_Short_array1);
    return this;
  }

  public Integer[] getTest_Integer_array() {
    return _getTarget().getTest_Integer_array();
  }

  public TestParcelableData setTest_Integer_array(Integer[] test_Integer_array1) {
    TestParcelableData target = _getTarget();
    Integer[] oldValue = target.getTest_Integer_array();
    if(_getEqualsComparator().isEquals(oldValue, test_Integer_array1)) {
      return this;
    }
    target.setTest_Integer_array(test_Integer_array1);
    dispatchValueChanged(PROP_test_Integer_array, oldValue, test_Integer_array1);
    return this;
  }

  public Boolean getTest_Boolean() {
    return _getTarget().getTest_Boolean();
  }

  public TestParcelableData setTest_Boolean(Boolean test_Boolean1) {
    TestParcelableData target = _getTarget();
    Boolean oldValue = target.getTest_Boolean();
    if(_getEqualsComparator().isEquals(oldValue, test_Boolean1)) {
      return this;
    }
    target.setTest_Boolean(test_Boolean1);
    dispatchValueChanged(PROP_test_Boolean, oldValue, test_Boolean1);
    return this;
  }

  @Override
  public void applyProperties(PropertyInterceptor interceptor) {
    Throwables.checkNull(interceptor);
    startBatchApply(interceptor)
      .addProperty(PROP_test_int_list, getTest_int_list())
      .addProperty(PROP_test_Float_list, getTest_Float_list())
      .addProperty(PROP_test_Double_list, getTest_Double_list())
      .addProperty(PROP_test_Integer, getTest_Integer())
      .addProperty(PROP_test_short_list, getTest_short_list())
      .addProperty(PROP_test_Character, getTest_Character())
      .addProperty(PROP_test_boolean, isTest_boolean())
      .addProperty(PROP_test_Boolean_list, getTest_Boolean_list())
      .addProperty(PROP_test_short_array, getTest_short_array())
      .addProperty(PROP_test_int_array, getTest_int_array())
      .addProperty(PROP_test_Byte_list, getTest_Byte_list())
      .addProperty(PROP_test_String, getTest_String())
      .addProperty(PROP_test_long_list, getTest_long_list())
      .addProperty(PROP_test_Integer_list, getTest_Integer_list())
      .addProperty(PROP_test_byte_array, getTest_byte_array())
      .addProperty(PROP_test_long_array, getTest_long_array())
      .addProperty(PROP_test_Short, getTest_Short())
      .addProperty(PROP_test_char_array, getTest_char_array())
      .addProperty(PROP_test_Float_array, getTest_Float_array())
      .addProperty(PROP_test_boolean_array, getTest_boolean_array())
      .addProperty(PROP_test_Long, getTest_Long())
      .addProperty(PROP_test_char, getTest_char())
      .addProperty(PROP_test_double, getTest_double())
      .addProperty(PROP_test_Long_array, getTest_Long_array())
      .addProperty(PROP_test_ResultData_list, getTest_ResultData_list())
      .addProperty(PROP_test_String_array, getTest_String_array())
      .addProperty(PROP_test_Byte, getTest_Byte())
      .addProperty(PROP_test_ResultData, getTest_ResultData())
      .addProperty(PROP_test_Double, getTest_Double())
      .addProperty(PROP_test_byte, getTest_byte())
      .addProperty(PROP_test_boolean_list, getTest_boolean_list())
      .addProperty(PROP_test_float_list, getTest_float_list())
      .addProperty(PROP_test_Float, getTest_Float())
      .addProperty(PROP_test_short, getTest_short())
      .addProperty(PROP_test_Long_list, getTest_Long_list())
      .addProperty(PROP_test_Boolean_array, getTest_Boolean_array())
      .addProperty(PROP_test_Short_list, getTest_Short_list())
      .addProperty(PROP_test_byte_list, getTest_byte_list())
      .addProperty(PROP_test_float_array, getTest_float_array())
      .addProperty(PROP_test_long, getTest_long())
      .addProperty(PROP_test_Byte_array, getTest_Byte_array())
      .addProperty(PROP_test_float, getTest_float())
      .addProperty(PROP_test_SparseArray, getTest_SparseArray())
      .addProperty(PROP_test_Character_list, getTest_Character_list())
      .addProperty(PROP_test_double_array, getTest_double_array())
      .addProperty(PROP_test_String_list, getTest_String_list())
      .addProperty(PROP_test_int, getTest_int())
      .addProperty(PROP_test_Double_array, getTest_Double_array())
      .addProperty(PROP_test_ResultData_array, getTest_ResultData_array())
      .addProperty(PROP_test_double_list, getTest_double_list())
      .addProperty(PROP_test_short_array2, getTest_short_array2())
      .addProperty(PROP_test_char_list, getTest_char_list())
      .addProperty(PROP_test_Character_array, getTest_Character_array())
      .addProperty(PROP_test_Short_array, getTest_Short_array())
      .addProperty(PROP_test_Integer_array, getTest_Integer_array())
      .addProperty(PROP_test_Boolean, getTest_Boolean())
    .apply();
  }

  @Override
  public void reset() {
    _getTarget().reset();
  }

  @Override
  public String toString() {
    return _getTarget().toString();
  }

  @Override
  public void clearProperties() {
    throw new UnsupportedOperationException("proxy class can't call this method.");
  }

  @Override
  public void recycle() {
    throw new UnsupportedOperationException("proxy class can't call this method.");
  }
}
