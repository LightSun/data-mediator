package com.heaven7.plugin.idea.data_mediator.test;

import com.google.gson.annotations.JsonAdapter;
import com.heaven7.java.base.util.Objects;
import com.heaven7.java.base.util.SparseArray;
import com.heaven7.java.data.mediator.DataPools;
import com.heaven7.java.data.mediator.IResetable;
import com.heaven7.java.data.mediator.ListPropertyEditor;
import com.heaven7.java.data.mediator.SparseArrayPropertyEditor;
import com.heaven7.java.data.mediator.internal.DataMediatorDelegate;
import com.heaven7.java.data.mediator.support.gson.TypeHandler;
import java.io.Serializable;
import java.lang.Boolean;
import java.lang.Byte;
import java.lang.Character;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.Short;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * <p>This class is generated by Data-mediator framework. DON'T EDIT IT!!!</p>
 *  @author heaven7 */
@JsonAdapter($TestParcelableData$TypeAdapter.class)
public class TestParcelableData_$Impl implements TestParcelableData, Serializable, IResetable, DataPools.Poolable {
  private static final long serialVersionUID =  1L;

  static {
    DataPools.preparePool("com.heaven7.plugin.idea.data_mediator.test.TestParcelableData_$Impl", 100);
    TypeHandler.registerTypeAdapter(TestParcelableData_$Impl.class, new $TestParcelableData$TypeAdapter());
  }

  private int test_int;

  private long test_long;

  private byte test_byte;

  private short test_short;

  private float test_float;

  private double test_double;

  private boolean test_boolean;

  private char test_char;

  private Integer test_Integer;

  private Long test_Long;

  private Short test_Short;

  private Byte test_Byte;

  private Float test_Float;

  private Double test_Double;

  private Boolean test_Boolean;

  private Character test_Character;

  private List<Integer> test_int_list;

  private List<Long> test_long_list;

  private List<Byte> test_byte_list;

  private List<Short> test_short_list;

  private List<Float> test_float_list;

  private List<Double> test_double_list;

  private List<Boolean> test_boolean_list;

  private List<Character> test_char_list;

  private List<Integer> test_Integer_list;

  private List<Long> test_Long_list;

  private List<Short> test_Short_list;

  private List<Byte> test_Byte_list;

  private List<Float> test_Float_list;

  private List<Double> test_Double_list;

  private List<Boolean> test_Boolean_list;

  private List<Character> test_Character_list;

  private int[] test_int_array;

  private long[] test_long_array;

  private byte[] test_byte_array;

  private short[] test_short_array;

  private short[] test_short_array2;

  private float[] test_float_array;

  private double[] test_double_array;

  private boolean[] test_boolean_array;

  private char[] test_char_array;

  private Integer[] test_Integer_array;

  private Long[] test_Long_array;

  private Short[] test_Short_array;

  private Byte[] test_Byte_array;

  private Float[] test_Float_array;

  private Double[] test_Double_array;

  private Boolean[] test_Boolean_array;

  private Character[] test_Character_array;

  private String test_String;

  private String[] test_String_array;

  private List<String> test_String_list;

  private FlowItem test_ResultData;

  private List<FlowItem> test_ResultData_list;

  private FlowItem[] test_ResultData_array;

  private SparseArray<FlowItem> test_SparseArray;

  public TestParcelableData_$Impl() {
  }

  @Override
  public void reset() {
    this.test_int = 0;
    this.test_long = 0;
    this.test_byte = 0;
    this.test_short = 0;
    this.test_float = 0f;
    this.test_double = 0d;
    this.test_boolean = false;
    this.test_char = 0;
    this.test_Integer = null;
    this.test_Long = null;
    this.test_Short = null;
    this.test_Byte = null;
    this.test_Float = null;
    this.test_Double = null;
    this.test_Boolean = null;
    this.test_Character = null;
    this.test_int_list = null;
    this.test_long_list = null;
    this.test_byte_list = null;
    this.test_short_list = null;
    this.test_float_list = null;
    this.test_double_list = null;
    this.test_boolean_list = null;
    this.test_char_list = null;
    this.test_Integer_list = null;
    this.test_Long_list = null;
    this.test_Short_list = null;
    this.test_Byte_list = null;
    this.test_Float_list = null;
    this.test_Double_list = null;
    this.test_Boolean_list = null;
    this.test_Character_list = null;
    this.test_int_array = null;
    this.test_long_array = null;
    this.test_byte_array = null;
    this.test_short_array = null;
    this.test_short_array2 = null;
    this.test_float_array = null;
    this.test_double_array = null;
    this.test_boolean_array = null;
    this.test_char_array = null;
    this.test_Integer_array = null;
    this.test_Long_array = null;
    this.test_Short_array = null;
    this.test_Byte_array = null;
    this.test_Float_array = null;
    this.test_Double_array = null;
    this.test_Boolean_array = null;
    this.test_Character_array = null;
    this.test_String = null;
    this.test_String_array = null;
    this.test_String_list = null;
    this.test_ResultData = null;
    this.test_ResultData_list = null;
    this.test_SparseArray = null;
  }

  @Override
  public void recycle() {
    DataPools.recycle(this);
  }

  @Override
  public void clearProperties() {
    this.test_int_list = null;
    this.test_Float_list = null;
    this.test_Double_list = null;
    this.test_Integer = null;
    this.test_short_list = null;
    this.test_Character = null;
    this.test_boolean = false;
    this.test_Boolean_list = null;
    this.test_short_array = null;
    this.test_int_array = null;
    this.test_Byte_list = null;
    this.test_String = null;
    this.test_long_list = null;
    this.test_Integer_list = null;
    this.test_byte_array = null;
    this.test_long_array = null;
    this.test_Short = null;
    this.test_char_array = null;
    this.test_Float_array = null;
    this.test_boolean_array = null;
    this.test_Long = null;
    this.test_char = 0;
    this.test_double = 0d;
    this.test_Long_array = null;
    this.test_ResultData_list = null;
    this.test_String_array = null;
    this.test_Byte = null;
    this.test_ResultData = null;
    this.test_Double = null;
    this.test_byte = 0;
    this.test_boolean_list = null;
    this.test_float_list = null;
    this.test_Float = null;
    this.test_short = 0;
    this.test_Long_list = null;
    this.test_Boolean_array = null;
    this.test_Short_list = null;
    this.test_byte_list = null;
    this.test_float_array = null;
    this.test_long = 0;
    this.test_Byte_array = null;
    this.test_float = 0f;
    this.test_SparseArray = null;
    this.test_Character_list = null;
    this.test_double_array = null;
    this.test_String_list = null;
    this.test_int = 0;
    this.test_Double_array = null;
    this.test_ResultData_array = null;
    this.test_double_list = null;
    this.test_short_array2 = null;
    this.test_char_list = null;
    this.test_Character_array = null;
    this.test_Short_array = null;
    this.test_Integer_array = null;
    this.test_Boolean = null;
  }

  @Override
  public String toString() {
    Objects.ToStringHelper helper = Objects.toStringHelper(this)
        .add("test_int", String.valueOf(this.test_int))
        .add("test_long", String.valueOf(this.test_long))
        .add("test_byte", String.valueOf(this.test_byte))
        .add("test_short", String.valueOf(this.test_short))
        .add("test_float", String.valueOf(this.test_float))
        .add("test_double", String.valueOf(this.test_double))
        .add("test_boolean", String.valueOf(this.test_boolean))
        .add("test_char", String.valueOf(this.test_char))
        .add("test_Integer", String.valueOf(this.test_Integer))
        .add("test_Long", String.valueOf(this.test_Long))
        .add("test_Short", String.valueOf(this.test_Short))
        .add("test_Byte", String.valueOf(this.test_Byte))
        .add("test_Float", String.valueOf(this.test_Float))
        .add("test_Double", String.valueOf(this.test_Double))
        .add("test_Boolean", String.valueOf(this.test_Boolean))
        .add("test_Character", String.valueOf(this.test_Character))
        .add("test_int_list", String.valueOf(this.test_int_list))
        .add("test_long_list", String.valueOf(this.test_long_list))
        .add("test_byte_list", String.valueOf(this.test_byte_list))
        .add("test_short_list", String.valueOf(this.test_short_list))
        .add("test_float_list", String.valueOf(this.test_float_list))
        .add("test_double_list", String.valueOf(this.test_double_list))
        .add("test_boolean_list", String.valueOf(this.test_boolean_list))
        .add("test_char_list", String.valueOf(this.test_char_list))
        .add("test_Integer_list", String.valueOf(this.test_Integer_list))
        .add("test_Long_list", String.valueOf(this.test_Long_list))
        .add("test_Short_list", String.valueOf(this.test_Short_list))
        .add("test_Byte_list", String.valueOf(this.test_Byte_list))
        .add("test_Float_list", String.valueOf(this.test_Float_list))
        .add("test_Double_list", String.valueOf(this.test_Double_list))
        .add("test_Boolean_list", String.valueOf(this.test_Boolean_list))
        .add("test_Character_list", String.valueOf(this.test_Character_list))
        .add("test_int_array", Arrays.toString(this.test_int_array))
        .add("test_long_array", Arrays.toString(this.test_long_array))
        .add("test_byte_array", Arrays.toString(this.test_byte_array))
        .add("test_short_array", Arrays.toString(this.test_short_array))
        .add("test_short_array2", Arrays.toString(this.test_short_array2))
        .add("test_float_array", Arrays.toString(this.test_float_array))
        .add("test_double_array", Arrays.toString(this.test_double_array))
        .add("test_boolean_array", Arrays.toString(this.test_boolean_array))
        .add("test_char_array", Arrays.toString(this.test_char_array))
        .add("test_Integer_array", Arrays.toString(this.test_Integer_array))
        .add("test_Long_array", Arrays.toString(this.test_Long_array))
        .add("test_Short_array", Arrays.toString(this.test_Short_array))
        .add("test_Byte_array", Arrays.toString(this.test_Byte_array))
        .add("test_Float_array", Arrays.toString(this.test_Float_array))
        .add("test_Double_array", Arrays.toString(this.test_Double_array))
        .add("test_Boolean_array", Arrays.toString(this.test_Boolean_array))
        .add("test_Character_array", Arrays.toString(this.test_Character_array))
        .add("test_String", String.valueOf(this.test_String))
        .add("test_String_array", Arrays.toString(this.test_String_array))
        .add("test_String_list", String.valueOf(this.test_String_list))
        .add("test_ResultData", String.valueOf(this.test_ResultData))
        .add("test_ResultData_list", String.valueOf(this.test_ResultData_list))
        .add("test_ResultData_array", Arrays.toString(this.test_ResultData_array))
        .add("test_SparseArray", String.valueOf(this.test_SparseArray));
    return helper.toString();
  }

  public int getTest_int() {
    return test_int;
  }

  public TestParcelableData setTest_int(int test_int1) {
    this.test_int = test_int1;
    return this;
  }

  public long getTest_long() {
    return test_long;
  }

  public TestParcelableData setTest_long(long test_long1) {
    this.test_long = test_long1;
    return this;
  }

  public byte getTest_byte() {
    return test_byte;
  }

  public TestParcelableData setTest_byte(byte test_byte1) {
    this.test_byte = test_byte1;
    return this;
  }

  public short getTest_short() {
    return test_short;
  }

  public TestParcelableData setTest_short(short test_short1) {
    this.test_short = test_short1;
    return this;
  }

  public float getTest_float() {
    return test_float;
  }

  public TestParcelableData setTest_float(float test_float1) {
    this.test_float = test_float1;
    return this;
  }

  public double getTest_double() {
    return test_double;
  }

  public TestParcelableData setTest_double(double test_double1) {
    this.test_double = test_double1;
    return this;
  }

  public boolean isTest_boolean() {
    return test_boolean;
  }

  public TestParcelableData setTest_boolean(boolean test_boolean1) {
    this.test_boolean = test_boolean1;
    return this;
  }

  public char getTest_char() {
    return test_char;
  }

  public TestParcelableData setTest_char(char test_char1) {
    this.test_char = test_char1;
    return this;
  }

  public Integer getTest_Integer() {
    return test_Integer;
  }

  public TestParcelableData setTest_Integer(Integer test_Integer1) {
    this.test_Integer = test_Integer1;
    return this;
  }

  public Long getTest_Long() {
    return test_Long;
  }

  public TestParcelableData setTest_Long(Long test_Long1) {
    this.test_Long = test_Long1;
    return this;
  }

  public Short getTest_Short() {
    return test_Short;
  }

  public TestParcelableData setTest_Short(Short test_Short1) {
    this.test_Short = test_Short1;
    return this;
  }

  public Byte getTest_Byte() {
    return test_Byte;
  }

  public TestParcelableData setTest_Byte(Byte test_Byte1) {
    this.test_Byte = test_Byte1;
    return this;
  }

  public Float getTest_Float() {
    return test_Float;
  }

  public TestParcelableData setTest_Float(Float test_Float1) {
    this.test_Float = test_Float1;
    return this;
  }

  public Double getTest_Double() {
    return test_Double;
  }

  public TestParcelableData setTest_Double(Double test_Double1) {
    this.test_Double = test_Double1;
    return this;
  }

  public Boolean getTest_Boolean() {
    return test_Boolean;
  }

  public TestParcelableData setTest_Boolean(Boolean test_Boolean1) {
    this.test_Boolean = test_Boolean1;
    return this;
  }

  public Character getTest_Character() {
    return test_Character;
  }

  public TestParcelableData setTest_Character(Character test_Character1) {
    this.test_Character = test_Character1;
    return this;
  }

  public List<Integer> getTest_int_list() {
    return test_int_list;
  }

  public TestParcelableData setTest_int_list(List<Integer> test_int_list1) {
    this.test_int_list = test_int_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Integer> beginTest_int_listEditor() {
    if (test_int_list == null) {
      test_int_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Integer>(this, test_int_list, null, null);
  }

  public List<Long> getTest_long_list() {
    return test_long_list;
  }

  public TestParcelableData setTest_long_list(List<Long> test_long_list1) {
    this.test_long_list = test_long_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Long> beginTest_long_listEditor() {
    if (test_long_list == null) {
      test_long_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Long>(this, test_long_list, null, null);
  }

  public List<Byte> getTest_byte_list() {
    return test_byte_list;
  }

  public TestParcelableData setTest_byte_list(List<Byte> test_byte_list1) {
    this.test_byte_list = test_byte_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Byte> beginTest_byte_listEditor() {
    if (test_byte_list == null) {
      test_byte_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Byte>(this, test_byte_list, null, null);
  }

  public List<Short> getTest_short_list() {
    return test_short_list;
  }

  public TestParcelableData setTest_short_list(List<Short> test_short_list1) {
    this.test_short_list = test_short_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Short> beginTest_short_listEditor() {
    if (test_short_list == null) {
      test_short_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Short>(this, test_short_list, null, null);
  }

  public List<Float> getTest_float_list() {
    return test_float_list;
  }

  public TestParcelableData setTest_float_list(List<Float> test_float_list1) {
    this.test_float_list = test_float_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Float> beginTest_float_listEditor() {
    if (test_float_list == null) {
      test_float_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Float>(this, test_float_list, null, null);
  }

  public List<Double> getTest_double_list() {
    return test_double_list;
  }

  public TestParcelableData setTest_double_list(List<Double> test_double_list1) {
    this.test_double_list = test_double_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Double> beginTest_double_listEditor() {
    if (test_double_list == null) {
      test_double_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Double>(this, test_double_list, null, null);
  }

  public List<Boolean> getTest_boolean_list() {
    return test_boolean_list;
  }

  public TestParcelableData setTest_boolean_list(List<Boolean> test_boolean_list1) {
    this.test_boolean_list = test_boolean_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Boolean> beginTest_boolean_listEditor() {
    if (test_boolean_list == null) {
      test_boolean_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Boolean>(this, test_boolean_list, null, null);
  }

  public List<Character> getTest_char_list() {
    return test_char_list;
  }

  public TestParcelableData setTest_char_list(List<Character> test_char_list1) {
    this.test_char_list = test_char_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Character> beginTest_char_listEditor() {
    if (test_char_list == null) {
      test_char_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Character>(this, test_char_list, null, null);
  }

  public List<Integer> getTest_Integer_list() {
    return test_Integer_list;
  }

  public TestParcelableData setTest_Integer_list(List<Integer> test_Integer_list1) {
    this.test_Integer_list = test_Integer_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Integer> beginTest_Integer_listEditor() {
    if (test_Integer_list == null) {
      test_Integer_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Integer>(this, test_Integer_list, null, null);
  }

  public List<Long> getTest_Long_list() {
    return test_Long_list;
  }

  public TestParcelableData setTest_Long_list(List<Long> test_Long_list1) {
    this.test_Long_list = test_Long_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Long> beginTest_Long_listEditor() {
    if (test_Long_list == null) {
      test_Long_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Long>(this, test_Long_list, null, null);
  }

  public List<Short> getTest_Short_list() {
    return test_Short_list;
  }

  public TestParcelableData setTest_Short_list(List<Short> test_Short_list1) {
    this.test_Short_list = test_Short_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Short> beginTest_Short_listEditor() {
    if (test_Short_list == null) {
      test_Short_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Short>(this, test_Short_list, null, null);
  }

  public List<Byte> getTest_Byte_list() {
    return test_Byte_list;
  }

  public TestParcelableData setTest_Byte_list(List<Byte> test_Byte_list1) {
    this.test_Byte_list = test_Byte_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Byte> beginTest_Byte_listEditor() {
    if (test_Byte_list == null) {
      test_Byte_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Byte>(this, test_Byte_list, null, null);
  }

  public List<Float> getTest_Float_list() {
    return test_Float_list;
  }

  public TestParcelableData setTest_Float_list(List<Float> test_Float_list1) {
    this.test_Float_list = test_Float_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Float> beginTest_Float_listEditor() {
    if (test_Float_list == null) {
      test_Float_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Float>(this, test_Float_list, null, null);
  }

  public List<Double> getTest_Double_list() {
    return test_Double_list;
  }

  public TestParcelableData setTest_Double_list(List<Double> test_Double_list1) {
    this.test_Double_list = test_Double_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Double> beginTest_Double_listEditor() {
    if (test_Double_list == null) {
      test_Double_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Double>(this, test_Double_list, null, null);
  }

  public List<Boolean> getTest_Boolean_list() {
    return test_Boolean_list;
  }

  public TestParcelableData setTest_Boolean_list(List<Boolean> test_Boolean_list1) {
    this.test_Boolean_list = test_Boolean_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Boolean> beginTest_Boolean_listEditor() {
    if (test_Boolean_list == null) {
      test_Boolean_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Boolean>(this, test_Boolean_list, null, null);
  }

  public List<Character> getTest_Character_list() {
    return test_Character_list;
  }

  public TestParcelableData setTest_Character_list(List<Character> test_Character_list1) {
    this.test_Character_list = test_Character_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, Character> beginTest_Character_listEditor() {
    if (test_Character_list == null) {
      test_Character_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,Character>(this, test_Character_list, null, null);
  }

  public int[] getTest_int_array() {
    return test_int_array;
  }

  public TestParcelableData setTest_int_array(int[] test_int_array1) {
    this.test_int_array = test_int_array1;
    return this;
  }

  public long[] getTest_long_array() {
    return test_long_array;
  }

  public TestParcelableData setTest_long_array(long[] test_long_array1) {
    this.test_long_array = test_long_array1;
    return this;
  }

  public byte[] getTest_byte_array() {
    return test_byte_array;
  }

  public TestParcelableData setTest_byte_array(byte[] test_byte_array1) {
    this.test_byte_array = test_byte_array1;
    return this;
  }

  public short[] getTest_short_array() {
    return test_short_array;
  }

  public TestParcelableData setTest_short_array(short[] test_short_array1) {
    this.test_short_array = test_short_array1;
    return this;
  }

  public short[] getTest_short_array2() {
    return test_short_array2;
  }

  public TestParcelableData setTest_short_array2(short[] test_short_array21) {
    this.test_short_array2 = test_short_array21;
    return this;
  }

  public float[] getTest_float_array() {
    return test_float_array;
  }

  public TestParcelableData setTest_float_array(float[] test_float_array1) {
    this.test_float_array = test_float_array1;
    return this;
  }

  public double[] getTest_double_array() {
    return test_double_array;
  }

  public TestParcelableData setTest_double_array(double[] test_double_array1) {
    this.test_double_array = test_double_array1;
    return this;
  }

  public boolean[] getTest_boolean_array() {
    return test_boolean_array;
  }

  public TestParcelableData setTest_boolean_array(boolean[] test_boolean_array1) {
    this.test_boolean_array = test_boolean_array1;
    return this;
  }

  public char[] getTest_char_array() {
    return test_char_array;
  }

  public TestParcelableData setTest_char_array(char[] test_char_array1) {
    this.test_char_array = test_char_array1;
    return this;
  }

  public Integer[] getTest_Integer_array() {
    return test_Integer_array;
  }

  public TestParcelableData setTest_Integer_array(Integer[] test_Integer_array1) {
    this.test_Integer_array = test_Integer_array1;
    return this;
  }

  public Long[] getTest_Long_array() {
    return test_Long_array;
  }

  public TestParcelableData setTest_Long_array(Long[] test_Long_array1) {
    this.test_Long_array = test_Long_array1;
    return this;
  }

  public Short[] getTest_Short_array() {
    return test_Short_array;
  }

  public TestParcelableData setTest_Short_array(Short[] test_Short_array1) {
    this.test_Short_array = test_Short_array1;
    return this;
  }

  public Byte[] getTest_Byte_array() {
    return test_Byte_array;
  }

  public TestParcelableData setTest_Byte_array(Byte[] test_Byte_array1) {
    this.test_Byte_array = test_Byte_array1;
    return this;
  }

  public Float[] getTest_Float_array() {
    return test_Float_array;
  }

  public TestParcelableData setTest_Float_array(Float[] test_Float_array1) {
    this.test_Float_array = test_Float_array1;
    return this;
  }

  public Double[] getTest_Double_array() {
    return test_Double_array;
  }

  public TestParcelableData setTest_Double_array(Double[] test_Double_array1) {
    this.test_Double_array = test_Double_array1;
    return this;
  }

  public Boolean[] getTest_Boolean_array() {
    return test_Boolean_array;
  }

  public TestParcelableData setTest_Boolean_array(Boolean[] test_Boolean_array1) {
    this.test_Boolean_array = test_Boolean_array1;
    return this;
  }

  public Character[] getTest_Character_array() {
    return test_Character_array;
  }

  public TestParcelableData setTest_Character_array(Character[] test_Character_array1) {
    this.test_Character_array = test_Character_array1;
    return this;
  }

  public String getTest_String() {
    return test_String;
  }

  public TestParcelableData setTest_String(String test_String1) {
    this.test_String = test_String1;
    return this;
  }

  public String[] getTest_String_array() {
    return test_String_array;
  }

  public TestParcelableData setTest_String_array(String[] test_String_array1) {
    this.test_String_array = test_String_array1;
    return this;
  }

  public List<String> getTest_String_list() {
    return test_String_list;
  }

  public TestParcelableData setTest_String_list(List<String> test_String_list1) {
    this.test_String_list = test_String_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, String> beginTest_String_listEditor() {
    if (test_String_list == null) {
      test_String_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,String>(this, test_String_list, null, null);
  }

  public FlowItem getTest_ResultData() {
    return test_ResultData;
  }

  public TestParcelableData setTest_ResultData(FlowItem test_ResultData1) {
    this.test_ResultData = test_ResultData1;
    return this;
  }

  public List<FlowItem> getTest_ResultData_list() {
    return test_ResultData_list;
  }

  public TestParcelableData setTest_ResultData_list(List<FlowItem> test_ResultData_list1) {
    this.test_ResultData_list = test_ResultData_list1;
    return this;
  }

  public ListPropertyEditor<? extends TestParcelableData, FlowItem> beginTest_ResultData_listEditor() {
    if (test_ResultData_list == null) {
      test_ResultData_list = new ArrayList<>();
    }
    return new ListPropertyEditor<TestParcelableData,FlowItem>(this, test_ResultData_list, null, null);
  }

  public FlowItem[] getTest_ResultData_array() {
    return test_ResultData_array;
  }

  public TestParcelableData setTest_ResultData_array(FlowItem[] test_ResultData_array1) {
    this.test_ResultData_array = test_ResultData_array1;
    return this;
  }

  public SparseArray<FlowItem> getTest_SparseArray() {
    return test_SparseArray;
  }

  public TestParcelableData setTest_SparseArray(SparseArray<FlowItem> test_SparseArray1) {
    this.test_SparseArray = test_SparseArray1;
    return this;
  }

  public SparseArrayPropertyEditor<? extends TestParcelableData, FlowItem> beginTest_SparseArrayEditor() {
    if (test_SparseArray == null) {
      test_SparseArray = new SparseArray<>();
    }
    return new SparseArrayPropertyEditor<TestParcelableData,FlowItem>(this, DataMediatorDelegate.getDefault().getSparseArrayDelegate(test_SparseArray), null, null);
  }

  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + getTest_int();
    result = 31 * result + (int) (getTest_long() ^ (getTest_long() >>> 32));
    result = 31 * result + (int) getTest_byte();
    result = 31 * result + (int) getTest_short();
    result = 31 * result + (getTest_float() != +0.0f ? Float.floatToIntBits(getTest_float()) : 0);
    long temp = Double.doubleToLongBits(getTest_double());
    result = 31 * result + (int) (temp ^ (temp >>> 32));
    result = 31 * result + (isTest_boolean() ? 1 : 0);
    result = 31 * result + (int) getTest_char();
    result = 31 * result + (getTest_Integer() != null ? getTest_Integer().hashCode() : 0);
    result = 31 * result + (getTest_Long() != null ? getTest_Long().hashCode() : 0);
    result = 31 * result + (getTest_Short() != null ? getTest_Short().hashCode() : 0);
    result = 31 * result + (getTest_Byte() != null ? getTest_Byte().hashCode() : 0);
    result = 31 * result + (getTest_Float() != null ? getTest_Float().hashCode() : 0);
    result = 31 * result + (getTest_Double() != null ? getTest_Double().hashCode() : 0);
    result = 31 * result + (getTest_Boolean() != null ? getTest_Boolean().hashCode() : 0);
    result = 31 * result + (getTest_Character() != null ? getTest_Character().hashCode() : 0);
    result = 31 * result + (getTest_int_list() != null ? getTest_int_list().hashCode() : 0);
    result = 31 * result + (getTest_long_list() != null ? getTest_long_list().hashCode() : 0);
    result = 31 * result + (getTest_byte_list() != null ? getTest_byte_list().hashCode() : 0);
    result = 31 * result + (getTest_short_list() != null ? getTest_short_list().hashCode() : 0);
    result = 31 * result + (getTest_float_list() != null ? getTest_float_list().hashCode() : 0);
    result = 31 * result + (getTest_double_list() != null ? getTest_double_list().hashCode() : 0);
    result = 31 * result + (getTest_boolean_list() != null ? getTest_boolean_list().hashCode() : 0);
    result = 31 * result + (getTest_char_list() != null ? getTest_char_list().hashCode() : 0);
    result = 31 * result + (getTest_Integer_list() != null ? getTest_Integer_list().hashCode() : 0);
    result = 31 * result + (getTest_Long_list() != null ? getTest_Long_list().hashCode() : 0);
    result = 31 * result + (getTest_Short_list() != null ? getTest_Short_list().hashCode() : 0);
    result = 31 * result + (getTest_Byte_list() != null ? getTest_Byte_list().hashCode() : 0);
    result = 31 * result + (getTest_Float_list() != null ? getTest_Float_list().hashCode() : 0);
    result = 31 * result + (getTest_Double_list() != null ? getTest_Double_list().hashCode() : 0);
    result = 31 * result + (getTest_Boolean_list() != null ? getTest_Boolean_list().hashCode() : 0);
    result = 31 * result + (getTest_Character_list() != null ? getTest_Character_list().hashCode() : 0);
    result = 31 * result + Arrays.hashCode(getTest_int_array());
    result = 31 * result + Arrays.hashCode(getTest_long_array());
    result = 31 * result + Arrays.hashCode(getTest_byte_array());
    result = 31 * result + Arrays.hashCode(getTest_short_array());
    result = 31 * result + Arrays.hashCode(getTest_short_array2());
    result = 31 * result + Arrays.hashCode(getTest_float_array());
    result = 31 * result + Arrays.hashCode(getTest_double_array());
    result = 31 * result + Arrays.hashCode(getTest_boolean_array());
    result = 31 * result + Arrays.hashCode(getTest_char_array());
    result = 31 * result + Arrays.hashCode(getTest_Integer_array());
    result = 31 * result + Arrays.hashCode(getTest_Long_array());
    result = 31 * result + Arrays.hashCode(getTest_Short_array());
    result = 31 * result + Arrays.hashCode(getTest_Byte_array());
    result = 31 * result + Arrays.hashCode(getTest_Float_array());
    result = 31 * result + Arrays.hashCode(getTest_Double_array());
    result = 31 * result + Arrays.hashCode(getTest_Boolean_array());
    result = 31 * result + Arrays.hashCode(getTest_Character_array());
    result = 31 * result + (getTest_String() != null ? getTest_String().hashCode() : 0);
    result = 31 * result + Arrays.hashCode(getTest_String_array());
    result = 31 * result + (getTest_String_list() != null ? getTest_String_list().hashCode() : 0);
    result = 31 * result + (getTest_ResultData() != null ? getTest_ResultData().hashCode() : 0);
    result = 31 * result + (getTest_ResultData_list() != null ? getTest_ResultData_list().hashCode() : 0);
    result = 31 * result + (getTest_SparseArray() != null ? getTest_SparseArray().hashCode() : 0);
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof TestParcelableData_$Impl)) {
      return false;
    }
     TestParcelableData_$Impl that = (TestParcelableData_$Impl) o;
    if (getTest_int() != that.getTest_int()) {
      return false;
    }
    if (getTest_long() != that.getTest_long()) {
      return false;
    }
    if (getTest_byte() != that.getTest_byte()) {
      return false;
    }
    if (getTest_short() != that.getTest_short()) {
      return false;
    }
    if (Float.compare(that.getTest_float(), getTest_float()) != 0) {
      return false;
    }
    if (Double.compare(that.getTest_double(), getTest_double()) != 0) {
      return false;
    }
    if (isTest_boolean() != that.isTest_boolean()) {
      return false;
    }
    if (getTest_char() != that.getTest_char()) {
      return false;
    }
    if (getTest_Integer() != null ? !getTest_Integer().equals(that.getTest_Integer()) : that.getTest_Integer() != null) {
      return false;
    }
    if (getTest_Long() != null ? !getTest_Long().equals(that.getTest_Long()) : that.getTest_Long() != null) {
      return false;
    }
    if (getTest_Short() != null ? !getTest_Short().equals(that.getTest_Short()) : that.getTest_Short() != null) {
      return false;
    }
    if (getTest_Byte() != null ? !getTest_Byte().equals(that.getTest_Byte()) : that.getTest_Byte() != null) {
      return false;
    }
    if (getTest_Float() != null ? !getTest_Float().equals(that.getTest_Float()) : that.getTest_Float() != null) {
      return false;
    }
    if (getTest_Double() != null ? !getTest_Double().equals(that.getTest_Double()) : that.getTest_Double() != null) {
      return false;
    }
    if (getTest_Boolean() != null ? !getTest_Boolean().equals(that.getTest_Boolean()) : that.getTest_Boolean() != null) {
      return false;
    }
    if (getTest_Character() != null ? !getTest_Character().equals(that.getTest_Character()) : that.getTest_Character() != null) {
      return false;
    }
    if (getTest_int_list() != null ? !getTest_int_list().equals(that.getTest_int_list()) : that.getTest_int_list() != null) {
      return false;
    }
    if (getTest_long_list() != null ? !getTest_long_list().equals(that.getTest_long_list()) : that.getTest_long_list() != null) {
      return false;
    }
    if (getTest_byte_list() != null ? !getTest_byte_list().equals(that.getTest_byte_list()) : that.getTest_byte_list() != null) {
      return false;
    }
    if (getTest_short_list() != null ? !getTest_short_list().equals(that.getTest_short_list()) : that.getTest_short_list() != null) {
      return false;
    }
    if (getTest_float_list() != null ? !getTest_float_list().equals(that.getTest_float_list()) : that.getTest_float_list() != null) {
      return false;
    }
    if (getTest_double_list() != null ? !getTest_double_list().equals(that.getTest_double_list()) : that.getTest_double_list() != null) {
      return false;
    }
    if (getTest_boolean_list() != null ? !getTest_boolean_list().equals(that.getTest_boolean_list()) : that.getTest_boolean_list() != null) {
      return false;
    }
    if (getTest_char_list() != null ? !getTest_char_list().equals(that.getTest_char_list()) : that.getTest_char_list() != null) {
      return false;
    }
    if (getTest_Integer_list() != null ? !getTest_Integer_list().equals(that.getTest_Integer_list()) : that.getTest_Integer_list() != null) {
      return false;
    }
    if (getTest_Long_list() != null ? !getTest_Long_list().equals(that.getTest_Long_list()) : that.getTest_Long_list() != null) {
      return false;
    }
    if (getTest_Short_list() != null ? !getTest_Short_list().equals(that.getTest_Short_list()) : that.getTest_Short_list() != null) {
      return false;
    }
    if (getTest_Byte_list() != null ? !getTest_Byte_list().equals(that.getTest_Byte_list()) : that.getTest_Byte_list() != null) {
      return false;
    }
    if (getTest_Float_list() != null ? !getTest_Float_list().equals(that.getTest_Float_list()) : that.getTest_Float_list() != null) {
      return false;
    }
    if (getTest_Double_list() != null ? !getTest_Double_list().equals(that.getTest_Double_list()) : that.getTest_Double_list() != null) {
      return false;
    }
    if (getTest_Boolean_list() != null ? !getTest_Boolean_list().equals(that.getTest_Boolean_list()) : that.getTest_Boolean_list() != null) {
      return false;
    }
    if (getTest_Character_list() != null ? !getTest_Character_list().equals(that.getTest_Character_list()) : that.getTest_Character_list() != null) {
      return false;
    }
      if (!Arrays.equals(getTest_int_array(), that.getTest_int_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_long_array(), that.getTest_long_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_byte_array(), that.getTest_byte_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_short_array(), that.getTest_short_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_short_array2(), that.getTest_short_array2())) {
      return false;
    }
      if (!Arrays.equals(getTest_float_array(), that.getTest_float_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_double_array(), that.getTest_double_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_boolean_array(), that.getTest_boolean_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_char_array(), that.getTest_char_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_Integer_array(), that.getTest_Integer_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_Long_array(), that.getTest_Long_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_Short_array(), that.getTest_Short_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_Byte_array(), that.getTest_Byte_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_Float_array(), that.getTest_Float_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_Double_array(), that.getTest_Double_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_Boolean_array(), that.getTest_Boolean_array())) {
      return false;
    }
      if (!Arrays.equals(getTest_Character_array(), that.getTest_Character_array())) {
      return false;
    }
    if (getTest_String() != null ? !getTest_String().equals(that.getTest_String()) : that.getTest_String() != null) {
      return false;
    }
      if (!Arrays.equals(getTest_String_array(), that.getTest_String_array())) {
      return false;
    }
    if (getTest_String_list() != null ? !getTest_String_list().equals(that.getTest_String_list()) : that.getTest_String_list() != null) {
      return false;
    }
    if (getTest_ResultData() != null ? !getTest_ResultData().equals(that.getTest_ResultData()) : that.getTest_ResultData() != null) {
      return false;
    }
    if (getTest_ResultData_list() != null ? !getTest_ResultData_list().equals(that.getTest_ResultData_list()) : that.getTest_ResultData_list() != null) {
      return false;
    }
    if (getTest_SparseArray() != null ? !getTest_SparseArray().equals(that.getTest_SparseArray()) : that.getTest_SparseArray() != null) {
      return false;
    }
    return true;
  }
}
