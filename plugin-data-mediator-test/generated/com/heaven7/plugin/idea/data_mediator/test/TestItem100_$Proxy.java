package com.heaven7.plugin.idea.data_mediator.test;

import com.heaven7.java.base.util.SparseArray;
import com.heaven7.java.base.util.Throwables;
import com.heaven7.java.data.mediator.BaseMediator;
import com.heaven7.java.data.mediator.ListPropertyEditor;
import com.heaven7.java.data.mediator.PropertyInterceptor;
import com.heaven7.java.data.mediator.SparseArrayPropertyEditor;
import com.heaven7.java.data.mediator.internal.DataMediatorDelegate;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.UnsupportedOperationException;
import java.util.ArrayList;
import java.util.List;

/**
 * <p>This class is generated by Data-mediator framework. DON'T EDIT IT!!!</p>
 *  @author heaven7 */
public class TestItem100_$Proxy extends BaseMediator<TestItem100> implements TestItem100 {
  public TestItem100_$Proxy(TestItem100 base) {
    super(base);
  }

  public boolean isTestItem_4() {
    return _getTarget().isTestItem_4();
  }

  public TestItem100 setTestItem_4(boolean testItem_41) {
    TestItem100 target = _getTarget();
    boolean oldValue = target.isTestItem_4();
    if(_getEqualsComparator().isEquals(oldValue, testItem_41)) {
      return this;
    }
    target.setTestItem_4(testItem_41);
    dispatchValueChanged(PROP_testItem_4, oldValue, testItem_41);
    return this;
  }

  public int getTestItem_5() {
    return _getTarget().getTestItem_5();
  }

  public TestItem100 setTestItem_5(int testItem_51) {
    TestItem100 target = _getTarget();
    int oldValue = target.getTestItem_5();
    if(_getEqualsComparator().isEquals(oldValue, testItem_51)) {
      return this;
    }
    target.setTestItem_5(testItem_51);
    dispatchValueChanged(PROP_testItem_5, oldValue, testItem_51);
    return this;
  }

  public TestParcelableData getTestItem_6() {
    return _getTarget().getTestItem_6();
  }

  public TestItem100 setTestItem_6(TestParcelableData testItem_61) {
    TestItem100 target = _getTarget();
    TestParcelableData oldValue = target.getTestItem_6();
    if(_getEqualsComparator().isEquals(oldValue, testItem_61)) {
      return this;
    }
    target.setTestItem_6(testItem_61);
    dispatchValueChanged(PROP_testItem_6, oldValue, testItem_61);
    return this;
  }

  public boolean isSelected() {
    return _getTarget().isSelected();
  }

  public TestItem100 setSelected(boolean selected1) {
    TestItem100 target = _getTarget();
    boolean oldValue = target.isSelected();
    if(_getEqualsComparator().isEquals(oldValue, selected1)) {
      return this;
    }
    target.setSelected(selected1);
    dispatchValueChanged(PROP_selected, oldValue, selected1);
    return this;
  }

  public String getName() {
    return _getTarget().getName();
  }

  public TestItem100 setName(String name1) {
    TestItem100 target = _getTarget();
    String oldValue = target.getName();
    if(_getEqualsComparator().isEquals(oldValue, name1)) {
      return this;
    }
    target.setName(name1);
    dispatchValueChanged(PROP_name, oldValue, name1);
    return this;
  }

  public int getXxx1() {
    return _getTarget().getXxx1();
  }

  public TestItem100 setXxx1(int xxx11) {
    TestItem100 target = _getTarget();
    int oldValue = target.getXxx1();
    if(_getEqualsComparator().isEquals(oldValue, xxx11)) {
      return this;
    }
    target.setXxx1(xxx11);
    dispatchValueChanged(PROP_xxx1, oldValue, xxx11);
    return this;
  }

  public List<String> getDesc() {
    return _getTarget().getDesc();
  }

  public TestItem100 setDesc(List<String> desc1) {
    TestItem100 target = _getTarget();
    List<String> oldValue = target.getDesc();
    if(_getEqualsComparator().isEquals(oldValue, desc1)) {
      return this;
    }
    target.setDesc(desc1);
    dispatchValueChanged(PROP_desc, oldValue, desc1);
    return this;
  }

  public ListPropertyEditor<? extends TestItem100, String> beginDescEditor() {
    TestItem100 target = _getTarget();
    List<String> values = target.getDesc();
    if(values == null) {
      values = new ArrayList<>();
      target.setDesc(values);
    }
    return new ListPropertyEditor<TestItem100,String>(target, values, PROP_desc, this);
  }

  public int[] getXxx4() {
    return _getTarget().getXxx4();
  }

  public TestItem100 setXxx4(int[] xxx41) {
    TestItem100 target = _getTarget();
    int[] oldValue = target.getXxx4();
    if(_getEqualsComparator().isEquals(oldValue, xxx41)) {
      return this;
    }
    target.setXxx4(xxx41);
    dispatchValueChanged(PROP_xxx4, oldValue, xxx41);
    return this;
  }

  public Student getTestItem_1() {
    return _getTarget().getTestItem_1();
  }

  public TestItem100 setTestItem_1(Student testItem_11) {
    TestItem100 target = _getTarget();
    Student oldValue = target.getTestItem_1();
    if(_getEqualsComparator().isEquals(oldValue, testItem_11)) {
      return this;
    }
    target.setTestItem_1(testItem_11);
    dispatchValueChanged(PROP_testItem_1, oldValue, testItem_11);
    return this;
  }

  public Student getId() {
    return _getTarget().getId();
  }

  public TestItem100 setId(Student id1) {
    TestItem100 target = _getTarget();
    Student oldValue = target.getId();
    if(_getEqualsComparator().isEquals(oldValue, id1)) {
      return this;
    }
    target.setId(id1);
    dispatchValueChanged(PROP_id, oldValue, id1);
    return this;
  }

  public String getTestItem_2() {
    return _getTarget().getTestItem_2();
  }

  public TestItem100 setTestItem_2(String testItem_21) {
    TestItem100 target = _getTarget();
    String oldValue = target.getTestItem_2();
    if(_getEqualsComparator().isEquals(oldValue, testItem_21)) {
      return this;
    }
    target.setTestItem_2(testItem_21);
    dispatchValueChanged(PROP_testItem_2, oldValue, testItem_21);
    return this;
  }

  public List<String> getTestItem_3() {
    return _getTarget().getTestItem_3();
  }

  public TestItem100 setTestItem_3(List<String> testItem_31) {
    TestItem100 target = _getTarget();
    List<String> oldValue = target.getTestItem_3();
    if(_getEqualsComparator().isEquals(oldValue, testItem_31)) {
      return this;
    }
    target.setTestItem_3(testItem_31);
    dispatchValueChanged(PROP_testItem_3, oldValue, testItem_31);
    return this;
  }

  public ListPropertyEditor<? extends TestItem100, String> beginTestItem_3Editor() {
    TestItem100 target = _getTarget();
    List<String> values = target.getTestItem_3();
    if(values == null) {
      values = new ArrayList<>();
      target.setTestItem_3(values);
    }
    return new ListPropertyEditor<TestItem100,String>(target, values, PROP_testItem_3, this);
  }

  public Integer[] getXxx5() {
    return _getTarget().getXxx5();
  }

  public TestItem100 setXxx5(Integer[] xxx51) {
    TestItem100 target = _getTarget();
    Integer[] oldValue = target.getXxx5();
    if(_getEqualsComparator().isEquals(oldValue, xxx51)) {
      return this;
    }
    target.setXxx5(xxx51);
    dispatchValueChanged(PROP_xxx5, oldValue, xxx51);
    return this;
  }

  public FlowItem getTestItem100() {
    return _getTarget().getTestItem100();
  }

  public TestItem100 setTestItem100(FlowItem testItem1001) {
    TestItem100 target = _getTarget();
    FlowItem oldValue = target.getTestItem100();
    if(_getEqualsComparator().isEquals(oldValue, testItem1001)) {
      return this;
    }
    target.setTestItem100(testItem1001);
    dispatchValueChanged(PROP_testItem100, oldValue, testItem1001);
    return this;
  }

  public Integer getXxx2() {
    return _getTarget().getXxx2();
  }

  public TestItem100 setXxx2(Integer xxx21) {
    TestItem100 target = _getTarget();
    Integer oldValue = target.getXxx2();
    if(_getEqualsComparator().isEquals(oldValue, xxx21)) {
      return this;
    }
    target.setXxx2(xxx21);
    dispatchValueChanged(PROP_xxx2, oldValue, xxx21);
    return this;
  }

  public SparseArray<Integer> getXxx3() {
    return _getTarget().getXxx3();
  }

  public TestItem100 setXxx3(SparseArray<Integer> xxx31) {
    TestItem100 target = _getTarget();
    SparseArray<Integer> oldValue = target.getXxx3();
    if(_getEqualsComparator().isEquals(oldValue, xxx31)) {
      return this;
    }
    target.setXxx3(xxx31);
    dispatchValueChanged(PROP_xxx3, oldValue, xxx31);
    return this;
  }

  public SparseArrayPropertyEditor<? extends TestItem100, Integer> beginXxx3Editor() {
    TestItem100 target = _getTarget();
    SparseArray<Integer> values = target.getXxx3();
    if(values == null) {
      values = new SparseArray<>();
      target.setXxx3(values);
    }
    return new SparseArrayPropertyEditor<TestItem100,Integer>(target, DataMediatorDelegate.getDefault().getSparseArrayDelegate(values), PROP_xxx3, this);
  }

  @Override
  public void applyProperties(PropertyInterceptor interceptor) {
    Throwables.checkNull(interceptor);
    startBatchApply(interceptor)
      .addProperty(PROP_testItem_4, isTestItem_4())
      .addProperty(PROP_testItem_5, getTestItem_5())
      .addProperty(PROP_testItem_6, getTestItem_6())
      .addProperty(PROP_selected, isSelected())
      .addProperty(PROP_name, getName())
      .addProperty(PROP_xxx1, getXxx1())
      .addProperty(PROP_desc, getDesc())
      .addProperty(PROP_xxx4, getXxx4())
      .addProperty(PROP_testItem_1, getTestItem_1())
      .addProperty(PROP_id, getId())
      .addProperty(PROP_testItem_2, getTestItem_2())
      .addProperty(PROP_testItem_3, getTestItem_3())
      .addProperty(PROP_xxx5, getXxx5())
      .addProperty(PROP_testItem100, getTestItem100())
      .addProperty(PROP_xxx2, getXxx2())
      .addProperty(PROP_xxx3, getXxx3())
    .apply();
  }

  public void test() {
    Student.test( this );
  }

  public void _test2() {
    Student.test2( this );
  }

  @Override
  public String toString() {
    return _getTarget().toString();
  }

  @Override
  public void clearProperties() {
    throw new UnsupportedOperationException("proxy class can't call this method.");
  }

  @Override
  public void recycle() {
    throw new UnsupportedOperationException("proxy class can't call this method.");
  }
}
