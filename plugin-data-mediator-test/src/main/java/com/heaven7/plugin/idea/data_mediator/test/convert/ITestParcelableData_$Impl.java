package com.heaven7.plugin.idea.data_mediator.test.convert;

import com.heaven7.java.data.mediator.Field;
import com.heaven7.java.data.mediator.FieldFlags;
import com.heaven7.java.data.mediator.Fields;
import com.heaven7.plugin.idea.data_mediator.test.Student;

@Fields(value = {@Field(propName = "test_int", seriaName = "test_int", type = int.class),
        @Field(propName = "test_long", type = long.class, flags = FieldFlags.FLAGS_MAIN_SCOPES_2 | FieldFlags.FLAG_EXPOSE_DEFAULT | FieldFlags.FLAG_EXPOSE_DESERIALIZE_FALSE),
        @Field(propName = "test_byte", type = byte.class, since = 1.1),
        @Field(propName = "test_short", type = short.class, until = 1.8),
        @Field(propName = "test_float", type = float.class),
        @Field(propName = "test_double", type = double.class),
        @Field(propName = "test_boolean", type = boolean.class),
        @Field(propName = "test_char", type = char.class),
        @Field(propName = "test_Integer", type = Integer.class),
        @Field(propName = "test_Long", type = Long.class),
        @Field(propName = "test_Short", type = Short.class),
        @Field(propName = "test_Byte", type = Byte.class),
        @Field(propName = "test_Float", type = Float.class),
        @Field(propName = "test_Double", type = Double.class),
        @Field(propName = "test_Boolean", type = Boolean.class),
        @Field(propName = "test_Character", type = Character.class),
        @Field(propName = "test_int_list", type = Integer.class, complexType = 2),
        @Field(propName = "test_long_list", type = Long.class, complexType = 2),
        @Field(propName = "test_byte_list", type = Byte.class, complexType = 2),
        @Field(propName = "test_short_list", type = Short.class, complexType = 2),
        @Field(propName = "test_float_list", type = Float.class, complexType = 2),
        @Field(propName = "test_double_list", type = Double.class, complexType = 2),
        @Field(propName = "test_boolean_list", type = Boolean.class, complexType = 2),
        @Field(propName = "test_char_list", type = Character.class, complexType = 2),
        @Field(propName = "test_Integer_list", type = Integer.class, complexType = 2),
        @Field(propName = "test_Long_list", type = Long.class, complexType = 2),
        @Field(propName = "test_Short_list", type = Short.class, complexType = 2),
        @Field(propName = "test_Byte_list", type = Byte.class, complexType = 2),
        @Field(propName = "test_Float_list", type = Float.class, complexType = 2),
        @Field(propName = "test_Double_list", type = Double.class, complexType = 2),
        @Field(propName = "test_Boolean_list", type = Boolean.class, complexType = 2),
        @Field(propName = "test_Character_list", type = Character.class, complexType = 2),
        @Field(propName = "test_int_array", type = int.class, complexType = 1),
        @Field(propName = "test_long_array", type = long.class, complexType = 1),
        @Field(propName = "test_byte_array", type = byte.class, complexType = 1),
        @Field(propName = "test_short_array", type = short.class, complexType = 1),
        @Field(propName = "test_short_array2", type = short.class, complexType = 1),
        @Field(propName = "test_float_array", type = float.class, complexType = 1),
        @Field(propName = "test_double_array", type = double.class, complexType = 1),
        @Field(propName = "test_boolean_array", type = boolean.class, complexType = 1),
        @Field(propName = "test_char_array", type = char.class, complexType = 1),
        @Field(propName = "test_Integer_array", type = Integer.class, complexType = 1),
        @Field(propName = "test_Long_array", type = Long.class, complexType = 1),
        @Field(propName = "test_Short_array", type = Short.class, complexType = 1),
        @Field(propName = "test_Byte_array", type = Byte.class, complexType = 1),
        @Field(propName = "test_Float_array", type = Float.class, complexType = 1),
        @Field(propName = "test_Double_array", type = Double.class, complexType = 1),
        @Field(propName = "test_Boolean_array", type = Boolean.class, complexType = 1),
        @Field(propName = "test_Character_array", type = Character.class, complexType = 1),
        @Field(propName = "test_String"),
        @Field(propName = "test_String_array", complexType = 1),
        @Field(propName = "test_String_list", complexType = 2),
        @Field(propName = "test_ResultData", type = Student.Test.class),
        @Field(propName = "test_ResultData_list", type = Student.Test.class, complexType = 2),
        @Field(propName = "test_ResultData_array", type = Student.Test.class, complexType = 1),
        @Field(propName = "test_SparseArray", type = Student.Test.class, complexType = 3)},
        generateJsonAdapter = false)
public interface ITestParcelableData_$Impl {
}
